name: Build and Test

on:
  push:
    branches: [ main, develop, 'feature/*', 'copilot/*' ]
  pull_request:
    branches: [ main, develop ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build_type: [Release, Debug]
        
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Setup Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: '6.5.0'
        modules: 'qtmultimedia qtwebengine'
        
    - name: Setup vcpkg (Linux/macOS)
      if: runner.os != 'Windows'
      run: |
        git clone https://github.com/Microsoft/vcpkg.git
        cd vcpkg
        ./bootstrap-vcpkg.sh
        echo "VCPKG_ROOT=${{ github.workspace }}/vcpkg" >> $GITHUB_ENV
        echo "${{ github.workspace }}/vcpkg" >> $GITHUB_PATH
        
    - name: Setup vcpkg (Windows)
      if: runner.os == 'Windows'
      run: |
        git clone https://github.com/Microsoft/vcpkg.git
        cd vcpkg
        .\bootstrap-vcpkg.bat
        echo "VCPKG_ROOT=${{ github.workspace }}\vcpkg" >> $env:GITHUB_ENV
        echo "${{ github.workspace }}\vcpkg" >> $env:GITHUB_PATH
        
    - name: Install dependencies with vcpkg
      run: |
        vcpkg install --triplet=${{ runner.os == 'Windows' && 'x64-windows' || (runner.os == 'macOS' && 'x64-osx' || 'x64-linux') }}
        
    - name: Configure CMake
      run: |
        cmake -B build -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DCMAKE_TOOLCHAIN_FILE=${{ env.VCPKG_ROOT }}/scripts/buildsystems/vcpkg.cmake
        
    - name: Build
      run: cmake --build build --config ${{ matrix.build_type }} --parallel
      
    - name: Test
      working-directory: build
      run: ctest --output-on-failure --parallel --build-config ${{ matrix.build_type }}
      
    - name: Upload build artifacts (Release only)
      if: matrix.build_type == 'Release'
      uses: actions/upload-artifact@v4
      with:
        name: xeno-suite-${{ runner.os }}-${{ matrix.build_type }}
        path: |
          build/apps/*/xeno-*
          build/apps/*/*.exe
          !build/**/*.lib
          !build/**/*.a
          !build/**/*.pdb
        retention-days: 7

  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Install cppcheck
      run: sudo apt-get update && sudo apt-get install -y cppcheck
      
    - name: Run static analysis
      run: |
        cppcheck --enable=all --inconclusive --xml --xml-version=2 \
          --suppress=missingIncludeSystem \
          --suppress=unmatchedSuppression \
          --suppress=unusedFunction \
          --project=build/compile_commands.json \
          apps/ shared/ 2> cppcheck-results.xml || true
          
    - name: Upload cppcheck results
      uses: actions/upload-artifact@v4
      with:
        name: cppcheck-results
        path: cppcheck-results.xml
        retention-days: 7